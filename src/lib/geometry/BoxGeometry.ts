import { BufferAttribute } from "./BufferAttribute";
import { BufferGeometry } from "./BufferGeometry";

export class BoxGeometry extends BufferGeometry {
  width: number;
  height: number;
  depth: number;
  constructor(_width: number = 1, _height: number = 1, _depth: number = 1) {
    super();
    this.width = _width;
    this.height = _height;
    this.depth = _depth;
    const hw = this.width / 2,
      hh = this.height / 2,
      hd = this.depth / 2;
    const vertices = new Float32Array([
      -hw,
      hh,
      hd,
      -hw,
      -hh,
      hd,
      hw,
      -hh,
      hd,
      hw,
      hh,
      hd,
      -hw,
      hh,
      hd,
      hw,
      -hh,
      hd,

      -hw,
      hh,
      -hd,
      hw,
      -hh,
      -hd,
      -hw,
      -hh,
      -hd,
      hw,
      hh,
      -hd,
      hw,
      -hh,
      -hd,
      -hw,
      hh,
      -hd,

      -hw,
      hh,
      -hd,
      -hw,
      hh,
      hd,
      hw,
      hh,
      hd,
      hw,
      hh,
      -hd,
      -hw,
      hh,
      -hd,
      hw,
      hh,
      hd,

      -hw,
      -hh,
      -hd,
      hw,
      -hh,
      -hd,
      hw,
      -hh,
      hd,
      -hw,
      -hh,
      hd,
      -hw,
      -hh,
      -hd,
      hw,
      -hh,
      hd,

      hw,
      -hh,
      -hd,
      hw,
      hh,
      hd,
      hw,
      -hh,
      hd,
      hw,
      -hh,
      -hd,
      hw,
      hh,
      -hd,
      hw,
      hh,
      hd,

      -hw,
      -hh,
      -hd,
      -hw,
      hh,
      hd,
      -hw,
      hh,
      -hd,
      -hw,
      -hh,
      -hd,
      -hw,
      -hh,
      hd,
      -hw,
      hh,
      hd,
    ]);
    this.setAttribute("position", new BufferAttribute(vertices, 3));
    this.calculateNormals();
  }
}
